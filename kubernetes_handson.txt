29.07.2020
=========

Minikube
========

Kubernetes official document page 

https://kubernetes.io/docs/tasks/tools/

Before install minikube we must install kubectl utility


Install and Set Up kubectl
--------------------------

https://kubernetes.io/docs/tasks/tools/install-kubectl/



Install kubectl binary with curl on Linux

Download the latest release with the command:


# curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"



Make the kubectl binary executable.

# chmod +x ./kubectl


Move the binary in to your PATH.

# sudo mv ./kubectl /usr/local/bin/kubectl


Test to ensure the version you installed is up-to-date:

# kubectl version --client


Before install minikube check irtualization enabled or installed in your system


# grep -E --color 'vmx|svm' /proc/cpuinfo



Install Minikube via direct download
If you're not installing via a package, you can download a stand-alone binary and use that.


# curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
  && chmod +x minikube


# sudo install minikube /usr/local/bin/


# minikube start --driver=virtualbox or docker


check minikube status

# minikube status

minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured



view kubernets nodes

# kubectl get nodes

NAME       STATUS   ROLES    AGE   VERSION
minikube   Ready    master   25m   v1.18.3


30.07.2020
==========
Letâ€™s create a Kubernetes Deployment using an existing image named echoserver, which is a simple HTTP server and expose it on port 8080 using --port

# kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10

deployment.apps/hello-minikube created



view deployments
----------------

$ kubectl get deployments

NAME             READY   UP-TO-DATE   AVAILABLE   AGE
hello-minikube   0/1     1            0           54s



To access the hello-minikube Deployment, expose it as a Service:

$ kubectl expose deployment hello-minikube --type=NodePort --port=8080

service/hello-minikube exposed




Get the URL of the exposed Service to view the Service details:

$ minikube service hello-minikube --url


 Executing "docker container inspect minikube --format={{.State.Status}}" took an unusually long time: 5.445311092s
ðŸ’¡  Restarting the docker service may improve performance.
http://172.17.0.2:30163


copy the url past into browser o/p like below


Hostname: hello-minikube-64b64df8c9-bknm4

Pod Information:
	-no pod information available-

Server values:
	server_version=nginx: 1.13.3 - lua: 10008

Request Information:
	client_address=172.18.0.1
	method=GET
	real path=/
	query=
	request_version=1.1
	request_scheme=http
	request_uri=http://172.17.0.2:8080/

Request Headers:
	accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
	accept-encoding=gzip, deflate
	accept-language=en-US,en;q=0.5
	connection=keep-alive
	host=172.17.0.2:30163
	upgrade-insecure-requests=1
	user-agent=Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0

Request Body:
	-no body in request-




Delete the hello-minikube Service:

$ kubectl delete services hello-minikube

service "hello-minikube" deleted



Delete the hello-minikube Deployment:

$ kubectl delete deployment hello-minikube

deployment.apps "hello-minikube" deleted


$ kubectl get pods
NAME                              READY   STATUS        RESTARTS   AGE
hello-minikube-64b64df8c9-bknm4   1/1     Terminating   0          36m


$ kubectl get pods
No resources found in default namespace.


04.08.2020
==========

How to run pod on minikube enviroment

check minikube status

$ minikube start

$ minikube status


run nginx and pull nginx from dockerhub

$ kubectl run nginx --image=nginx

pod/nginx created



check pod status

$ kubectl get pods

NAME    READY   STATUS    RESTARTS   AGE
nginx   1/1     Running   0          81m


view more detail about pod

$ kubectl describe pod nginx


Name:         nginx
Namespace:    default
Priority:     0
Node:         minikube/172.17.0.2
Start Time:   Tue, 04 Aug 2020 10:40:07 +0530
Labels:       run=nginx
Annotations:  <none>
Status:       Running
IP:           172.18.0.3
IPs:
  IP:  172.18.0.3
Containers:
  nginx:
    Container ID:   docker://bdf92d5eda44985b75cd37911583159f91b6bf74352a35fc0eb69275596abdf0
    Image:          nginx
    Image ID:       docker-pullable://nginx@sha256:0632aa5183f266cf1b7272ab120f3fb7fe06fae6bf74a734de51590a6ef44cbe
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Tue, 04 Aug 2020 10:42:10 +0530
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-22jn8 (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  default-token-22jn8:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-22jn8
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:          <none>




view pod ip address
===================

$ kubectl get pod -o wide

NAME    READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES
nginx   1/1     Running   0          84m   172.18.0.3   minikube   <none>           <none>



13.08.2020
=========

creating pod using yaml

vim pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: web 
  labels:
    app: web
    tier: frontend    
spec:        
  containers:
  - name: nginx 
    image: nginx 

wq!

$ kubectl create -f pod.yml

or

$ kubectl apply -f pod.yml


$ kubectl get pods

$ kubectl describe pod nginx



Delete pod 

$ kubectl delete -f pod.yml


27.08.2020
==========


Here we are going to create replicaset based on pod definition file


create directory called replicaset under directory create replicaset.yaml file


vim reolicset.yaml


apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: myapp-replicaset
  labels:
    app: myapp
spec:
  selector:
    matchLabels:
      app: myapp
  replicas: 3
   
  template:
    metadata:
      name: nginx-2
      labels:
        app: myapp
    spec:
      containers:
      - name: nginx 
        image: nginx   


labels should be same 


create replicaset
----------------

$ kubectl create -f replicaset.yaml



view replicaset status
---------------------

$ kubectl get replicaset

NAME               DESIRED   CURRENT   READY   AGE
myapp-replicaset   2         2         2       3h51m


view number of running pod
--------------------------

$ kubectl get pods

NAME                     READY   STATUS    RESTARTS   AGE
myapp-replicaset-mmdfn   1/1     Running   0          3h54m
myapp-replicaset-qtjqq   1/1     Running   0          3h54m




delete one pod from replicaset
-----------------------------

$ kubectl delete pod myapp-replicaset-mmdfn


it will create new pod automatically


view detailed information about replicaset
-----------------------------------------

$ kubectl describe replicaset myapp-replicaset



if we create new same label as replicaset name it will terminate the pod
------------------------------------------------------------------------

$ kubectl create -f nginx.yaml




update the replicaset 
---------------------


$ kubectl edit replicaset myapp-replicaset

change

replicas=3 to replicas=4

save and edit


it will create one more pod additionally

$ kubectl get pods


scale replicaset
---------------

$ kubectl scale replicaset myapp-replicaset --replicas=5


$ kubectl get pods


26.09.2020
==========

create folder deployment

vim deployment.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
  labels:
    app: myapp
spec:
  selector:
    matchLabels:
      app: myapp
  replicas: 6
  template:
    metadata:
      name: nginx-2
      labels:
        app: myapp
    spec:
      containers:
        - name: nginx 
          image: nginx    


:wq!



create deployment using below command

first check pods 
----------------

$ kubectl get pods

No resources found in default namespace.


create deployment
-----------------

$ kubectl create -f deployment.yaml

deployment.apps/myapp-deployment created


check the status of deployment
------------------------------

$ kubectl rollout status deployment.apps/myapp-deployment


deployment "myapp-deployment" successfully rolled out


Delete deployment
-----------------

$ kubectl delete deployment myapp-deployment

deployment.apps "myapp-deployment" deleted


create deployment again
-----------------------

$ kubectl create -f deployment.yaml


check satus of deployment
------------------------

bring the pod one at a time after deleting deployment

$ kubectl rollout status deployment.apps.myapp-deployment

Waiting for deployment "myapp-deployment" rollout to finish: 0 of 6 updated replicas are available...
Waiting for deployment "myapp-deployment" rollout to finish: 1 of 6 updated replicas are available...
Waiting for deployment "myapp-deployment" rollout to finish: 2 of 6 updated replicas are available...
Waiting for deployment "myapp-deployment" rollout to finish: 3 of 6 updated replicas are available...
Waiting for deployment "myapp-deployment" rollout to finish: 4 of 6 updated replicas are available...
Waiting for deployment "myapp-deployment" rollout to finish: 5 of 6 updated replicas are available...
deployment "myapp-deployment" successfully rolled out

to see history of deployment
----------------------------

$ kubectl rollout history deployment/myapp-deployment

deployment.apps/myapp-deployment 
REVISION  CHANGE-CAUSE
1         <none>


delete deployment again
-----------------------

$ kubectl delete deployment myapp-deployment

deployment.apps "myapp-deployment" deleted



use record option create deployment
-----------------------------------

kubectl creaate -f deployment.yaml --record


now change cause recorded
-------------------------

$ kubectl rollout history deployment/myapp-deployment

deployment.apps/myapp-deployment 
REVISION  CHANGE-CAUSE
1         kubectl create --filename=deployment.yaml --record=true



now try to change deployment
----------------------------

$ kubectl describe deployment myapp-deployment
Name:                   myapp-deployment
Namespace:              default
CreationTimestamp:      Sat, 26 Sep 2020 16:58:50 +0530
Labels:                 app=myapp
Annotations:            deployment.kubernetes.io/revision: 1
                        kubernetes.io/change-cause: kubectl create --filename=deployment.yaml --record=true
Selector:               app=myapp
Replicas:               6 desired | 6 updated | 6 total | 6 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=myapp
  Containers:
   nginx:
    Image:        nginx
    Port:         <none>
    Host Port:    <none>
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   myapp-deployment-58f49b7545 (6/6 replicas created)
Events:
  Type    Reason             Age    From                   Message
  ----    ------             ----   ----                   -------
  Normal  ScalingReplicaSet  5m55s  deployment-controller  Scaled up replica set myapp-deployment-58f49b7545 to 6




change nginx into lower version

$ kubectl edit deployment myapp-deployment --record

:wq!

it's bring up new pod terminate the old pod


check status of deployment
--------------------------

$ kubectl rollout status deployment myapp-deployment

view history of deployment
--------------------------

$ kubectl rollout history deployment myapp-deployment


$ kubectl describe deployment myapp-deployment


made another change in dployment in diffrent way
-----------------------------------------------

$ kubectl set image deployment myapp-deployment nginx=nginx:1.18-perl --record


$ kubectl rollout status deployment myapp-deployment

Waiting for deployment "myapp-deployment" rollout to finish: 4 out of 6 new replicas have been updated...
Waiting for deployment "myapp-deployment" rollout to finish: 4 out of 6 new replicas have been updated...
Waiting for deployment "myapp-deployment" rollout to finish: 4 out of 6 new replicas have been updated...
Waiting for deployment "myapp-deployment" rollout to finish: 4 out of 6 new replicas have been updated...
Waiting for deployment "myapp-deployment" rollout to finish: 5 out of 6 new replicas have been updated...
Waiting for deployment "myapp-deployment" rollout to finish: 5 out of 6 new replicas have been updated...
Waiting for deployment "myapp-deployment" rollout to finish: 5 out of 6 new replicas have been updated...
Waiting for deployment "myapp-deployment" rollout to finish: 5 out of 6 new replicas have been updated...
Waiting for deployment "myapp-deployment" rollout to finish: 2 old replicas are pending termination...
Waiting for deployment "myapp-deployment" rollout to finish: 2 old replicas are pending termination...
Waiting for deployment "myapp-deployment" rollout to finish: 2 old replicas are pending termination...
Waiting for deployment "myapp-deployment" rollout to finish: 1 old replicas are pending termination...
Waiting for deployment "myapp-deployment" rollout to finish: 1 old replicas are pending termination...
Waiting for deployment "myapp-deployment" rollout to finish: 5 of 6 updated replicas are available...
deployment "myapp-deployment" successfully rolled out

$ kubectl describe deployment myapp-deployment


now we can see changes has been done 


$ kubectl rollout status deployment myapp-deployment


$ kubectl rollout history deployment myapp-deployment

deployment.apps/myapp-deployment 
REVISION  CHANGE-CAUSE
3         kubectl edit deployment myapp-deployment --record=true
4         kubectl edit deployment myapp-deployment --record=true
5         kubectl set image deployment myapp-deployment nginx=nginx:1.18-perl --record=true


check pods are running

$ kubectl get pods

incase new pods not working we can revert back into undo command
----------------------------------------------------------------

$ kubectl rollout undo deployment/myapp-deployment

$ kubectl rollout status deployment myapp-deployment

$ kubectl rollout history deployment myapp-deployment

$ kubectl describe deployment myapp-deployment



mae another change
-------------------

$ kubectl edit deployment myapp-deployment --record


kubectl get deployment myapp-deployment

NAME               READY   UP-TO-DATE   AVAILABLE   AGE
myapp-deployment   5/6     3            5           71m


kubectl get pods

NAME                                READY   STATUS             RESTARTS   AGE
myapp-deployment-789c649f95-76mq7   1/1     Running            0          8m43s
myapp-deployment-789c649f95-hj88s   1/1     Running            0          8m41s
myapp-deployment-789c649f95-j7pr2   1/1     Running            0          8m12s
myapp-deployment-789c649f95-psvkt   1/1     Running            0          8m23s
myapp-deployment-789c649f95-q9x6m   1/1     Running            0          8m43s
myapp-deployment-84cfd5697c-9s2lk   0/1     ImagePullBackOff   0          47s
myapp-deployment-84cfd5697c-fwn4s   0/1     ImagePullBackOff   0          48s
myapp-deployment-84cfd5697c-gvjkw   0/1     ImagePullBackOff   0          48s


even though we specify the wrong image application still can be accessible to end user 



$ kubectl rollout history deployment myapp-deployment


now revert back into older version
---------------------------------

$ kubectl rollout undo deployment myapp-deployment 

$ kubectl get pods

$ kubectl describe deployment myapp-deployment





 































